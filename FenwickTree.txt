#include <iostream> 
using namespace std; 
int sum(int* FenwickTree, int index) 
{ 
	int sum = 0;  
	index = index + 1; 
	while (index>0) 
	{ 
		sum += FenwickTree[index]; 
		index -= index & (-index); 
	} 
	return sum; 
} 
int query(int* FenwickTree , int l , int r)
{
  return sum( FenwickTree,r)-sum(FenwickTree,l-1);
}
void update(int* FenwickTree, int n, int index, int val) 
{ 
	index = index + 1; 
	while (index <= n) 
	{ 
	FenwickTree[index] += val; 
	index += index & (-index); 
	} 
} 

int *constructFenwickTree(int* arr, int n) 
{ 
	int *FenwickTree = new int[n+1]; 
	for (int i=1; i<=n; i++) 
		FenwickTree[i] = 0; 
	for (int i=0; i<n; i++) 
		update(FenwickTree, n, i, arr[i]); 
	return FenwickTree; 
} 
int main() 
{ 
	int freq[] = {2, 1, 1, 3, 2, 3, 4, 5, 6, 7, 8, 9}; 
	int n = sizeof(freq)/sizeof(freq[0]); 
	int *BITree = constructFenwickTree(freq, n); 
	cout << "Sum of elements in arr[0..5] is "
		<< sum(BITree, 5); 
/*	freq[3] += 6; 
	update(BITree, n, 3, 6); 
	cout << "\nSum of elements in arr[0..5] after update is "
		<< sum(BITree, 5); */
		cout<<endl<<"Range sum is "<<query(BITree,4,7);

	return 0; 
} 
