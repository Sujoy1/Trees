// Segment Tree with Lazy Propafation . It helps us when number of update queries are large

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

// Constructs the Segment tree

void buildTree(int* tree , int* a ,int index , int s ,int e)
{
    // Base case
    if(s>e)
    return ;
    
    // Base Case of Leaf Node
    
    if(s==e)
    {
        tree[index]=a[s];
        return;
    }
    
    // Recurseive Case
    int mid=(s+e)/2;
    buildTree(tree,a,2*index,s,mid);
    buildTree(tree,a,2*index+1,mid+1,e);
    int left  = tree[2*index];
    int right  = tree[2*index+1];
    tree[index]=min(left,right);
    
}

// Returns min value in range qe ,qs using  lazy Propagation;
  int rangeMinimumQueryLazy(int* tree, int* lazy,int index, 
                                      int s, int e,int qs, int qe) {

        if(s>e) {
            return INT_MAX;
        }

        //make sure all propagation is done at pos. If not update tree
        //at pos and mark its children for lazy propagation.
        if (lazy[index] != 0) {
            tree[index] += lazy[index];
            if (s!=e) { //not a leaf node we need  to propagate down
                lazy[2*index] += lazy[index];
                lazy[2*index+1] += lazy[index];
            }
            lazy[index] = 0;
        }

        //no overlap
        if(qs> e || s>qe){
            return INT_MAX;
        }

        //total overlap
        if(s>=qs && e<=qe){
            return tree[index];
        }

        //partial overlap
        int mid = (s+e)/2;
        return min(rangeMinimumQueryLazy(tree, lazy,2*index,
                        s, mid,qs,qe),
                rangeMinimumQueryLazy(tree, lazy,2*index+1,
                        mid + 1,e,qs,qe));

    }

// Updates the tree in the range qe to qs Lazily

void updateSegmentTreeRangeLazy(int* tree,int* lazy,int index,int s,int e,int qs,int qe,int inc) {
        if(s>e) {
            return;
        }

        //make sure all propagation is done at pos. If not update tree
        //at pos and mark its children for lazy propagation.
        if (lazy[index] != 0) {
            tree[index] += lazy[index];
            if (s != e) { //If not a leaf node we need  to propagate down
                lazy[2 *index] += lazy[index];
                lazy[2 *index+ 1] += lazy[index];
            }
            lazy[index] = 0;
        }

        //no overlap condition
        if(qs > e || s>qe) {
            return;
        }

        //total overlap condition
        if(s>=qs&&e<=qe) {
            tree[index] += inc;
            if(s!= e) {
                lazy[2*index] += inc;
                lazy[2*index+1] += inc;
            }
            return;
        }

        //otherwise partial overlap so look both left and right.
        int mid = (s+e)/2;
        updateSegmentTreeRangeLazy(tree, lazy,2*index,s,mid,qs,qe,inc);
        updateSegmentTreeRangeLazy(tree, lazy,2*index+1,mid+1,e,qs,qe,inc);
        tree[index] = min(tree[2*index],tree[2*index+1]);
    }


// It's testing time guys !

int main() {
	
int n,q,i,s,e,l,r,index;
	
	cin>>n>>q;
	int a[100];
	int* tree = new int[4*n+1];
    int* Lazy = new int[4*n+1];
    
	for(i=0;i<4*n+1;i++)
	Lazy[i]=0;
	
	for(i=0;i<n;i++)
	cin>>a[i];
	index=1;
	s=0;
	e = n-1;
	buildTree(tree,a,index,s,e);
	while(q--)
	{
	    cin>>l>>r;
	    cout<<rangeMinimumQueryLazy(tree,Lazy,index,s,e,l,r)<<endl;
	}
	return 0;
}
