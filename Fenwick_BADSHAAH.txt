#include <iostream> 
#include <bits/stdc++.h>
using namespace std; 
unsigned long long int  sum(unsigned long long int * FenwickTree,unsigned long long int  index) 
{ 
unsigned long long int sum = 0;  
//	index = index + 1; 
	while (index>0) 
	{ 
		sum += FenwickTree[index]; 
		index -= index & (-index); 
	} 
	return sum; 
} 
unsigned long long int  query(unsigned long long int * FenwickTree , unsigned long long int  l , unsigned long long int  r)
{
  return sum( FenwickTree,r)-sum(FenwickTree,l-1);
}
void update(unsigned long long int * FenwickTree,unsigned long long int  n, unsigned long long int  index, unsigned long long int val) 
{ 
//	index = index + 1; 
	while (index <= n) 
	{ 
	FenwickTree[index] += val; 
	index += index & (-index); 
	} 
} 
unsigned long long int search(unsigned long long int * FenwickTree,unsigned long long int l , unsigned long long int  u ,unsigned long long int prefix)
{
    if(l>u)
    return 0;
    if(l==u&&sum(FenwickTree,l)!=prefix)
    return 0;
    
    unsigned long long int mid = (u+l)/2;
    if(sum(FenwickTree,mid)==prefix)
    {
        return mid;
    }
    else if(sum(FenwickTree,mid)<prefix)
    {
        return search(FenwickTree,mid+1,u,prefix);
    }
    else
    {
        return search(FenwickTree,l,mid-1,prefix);
    }
}  
unsigned long long int  *constructFenwickTree(unsigned long long int * arr, unsigned long long int  n) 
{ 
unsigned long long int  *FenwickTree = new unsigned long long int [n+1]; 
	for (int i=1; i<=n; i++) 
		FenwickTree[i] = 0; 
	for (int i=1; i<=n; i++) 
		update(FenwickTree, n, i, arr[i]); 
	return FenwickTree; 
} 
int main() 
{
unsigned long long int n,m,i,s,p,q,a;
unsigned long long int arr[100000];
cin>>n>>m;
for(i=1;i<=n;i++)
cin>>arr[i];
unsigned long long int* FenwickTree = constructFenwickTree(arr,n) ;
while(m--)
{
    cin>>a;
    if(a==1)
    {
        cin>>p>>q;
        update(FenwickTree,n,p,q-arr[p]);
        arr[p]=q;
    }
    else
    {
        cin>>s;
        if(search(FenwickTree,1,n,s))
        cout<<"Found "<<search(FenwickTree,1,n,s)<<endl;
        else
        cout<<"Not Found"<<endl;
    }
}
	return 0; 
} 
